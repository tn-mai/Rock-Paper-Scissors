/**
* @file Main.cpp
*/
#include "Command.h"

/**
* プログラムのエントリーポイント.
*
* C++言語のプログラムはここから実行が開始される.
*/
int main()
{
  // [プログラムの初期化処理]
  initialize("じゃんけんゲーム");

  set_image(No_0, 400, 300, "背景_紙.jpg");

  set_text("じゃんけんぽん！");

  // 0=グー 1=チョキ 2=パー
  int gu = 0;
  int choki = 1;
  int pa = 2;

  // あなたの手
  int player_hand = gu;

  // コンピューターの手
  int cpu_hand = choki;

//  if (player_hand == gu && cpu_hand == choki) {
  if ((cpu_hand - player_hand + 3) % 3 == 1) {
    set_text("あなたの勝ちです！");
  }
  set_text("何かキーを押すと終了します");

  // [何かキーが押されるまで待つ]
  // wait_any_key(うぇいと・えにー・きー)は、なにかキーが押されるまでプログラムの実行を停止する関数.
  wait_any_key();

  // [繰り返し]
  // for(ふぉー)は、続く波括弧で囲われた範囲のプログラムを何度でも繰り返す「制御文(せいぎょぶん)」.
  // 顔文字みたいな「(;;)」の部分は「何度でも繰り返す」ことを示す記号.
  // 繰り返しを終わらせるにはbreak(ぶれいく)という制御文を使う.
  // コンピューターはbreak文を見つけると、そこからfor文の閉じ波括弧までのプログラムを無視し、閉じ波括弧の次の行から実行を続ける.
  for (;;) {

    // [文章を消す]
    // reset_all_text(りせっと・おーる・てきすと)は文章を全て消す関数.
    reset_all_text();

    // [文字を表示する]
  // set_text(せっと・てきすと)は、文字を表示する関数(かんすう).
  // 関数とは、ある目的を達成するためのプログラムをまとめたもの. 数学の関数とは少し違う.
  // 関数は「名前(引数1, 引数2, 引数3, ...)」のように、丸括弧の内側に引数(ひきすう)というものをカンマで区切って指定する.
  // 「引数」というのは関数を実行するときのパラメーター.
  // 関数によって引数の数や内容が異なる.
  // set_text(せっと・てきすと)は、引数で指定された文章を表示する関数.
  // C++言語では、「"(だぶる・くぉーてーしょん)」という記号で囲むことで「この部分はプログラムではなくて文章ですよ」ということを示す.
  // この関数の引数は文章がひとつあるだけ.
    set_text("[じゃんけんゲーム]");
    set_text("手を選んでください");

    // [選択肢を表示して選んでもらう]
    // select(せれくと)は、選択肢を表示する関数.
    // 最初の数字が「選択肢の数」、2つめ以降が「選択肢の文章」となっている.
    // ここでは、プレイヤーに手を選んでもらうために使っている.
    //
    // どの選択肢が選ばれたのかは、関数の「戻り値(もどりち)」というもので分かるようになっている.
    // 「戻り値」というのは、関数の結果を表す数値や文章などのこと.
    // 関数によって戻り値の内容は異なる.
    // どの関数も戻り値はひとつまで. また、戻り値がない関数もある.
    // select関数の場合、選択肢には左から順番に0,1,2,...という番号が自動で振られ、選ばれた選択肢の番号が戻り値になる.
    // つまり、選ばれたのがグーなら0、チョキなら1、パーなら2が戻り値になる.
    //
    // 戻り値は「変数(へんすう)」というものに格納することができる.
    // 「変数」は数値や文章の入れ物.
    // 変数を作るには、変数の「型(かた)」と「名前(なまえ)」が必要.
    // 「型」というのは「変数に入れられる情報の種類」.
    // 例えば「int(いんと)」は数値を入れる変数を作るための「型」.
    // 変数に数値を入れるには「=(いこーる)」記号を使う.
    // ここではplayer_handという名前の変数を作り、そこにselect関数の戻り値を格納している.
    int player_hand = select(3, "グー", "チョキ", "パー");

    // [CPUの手を選ぶ]
    // random(らんだむ)は、整数を無作為に選択する関数.
    // 最初の引数が選択範囲の最小値、2つめの引数が最大値になる.
    // ここではコンピューターの手を決めるために使っている.
    // 最初の引数が0、次が2なので、0〜2の範囲からひとつの整数が無作為に選ばれて戻り値になる.
    // 選ばれた数値が0ならグー、1ならチョキ、2ならパーが選ばれたとみなすことで、プレイヤーの手と対応させる.
    int cpu_hand = random(0, 2);

    set_text(0, 80, "じゃんけんぽん！");

    // [プレイヤーの手を表示]
    // if(いふ)は、変数の内容によって実行するプログラムを切り替える「制御文(せいぎょぶん)」.
    // if文は「if (条件式) { 条件式が真のときだけ実行されるプログラム }」の形を取る.
    // 「条件式」は「真」か「偽」になる数式.
    // 例えば「1 == 1」という条件式は「真」、「1 == 0」は「偽」になる.
    // C++言語では、数値の比較に「==(いこーる・いこーる)」を使う.
    // 「=(いこーる)」は代入に使われているので比較には使えない.
    // 条件式に変数が書かれている場合、変数に入れられた数値を使って比較を行う.

    // C++言語では、数値の比較に「==(いこーる・いこーる)」という連続した=記号を使う.
    // 2つの=の間にスペースを入れてはならない.
    // なぜ==なのかというと、=は代入で使われているから.
    // 比較が成立する式は「真(しん)」となる. 不成立な式は「偽」となる.
    // 例えば「1 == 1」は成立するので「真」、「1 == 0」は不成立なので「偽」.
    // 変数が書かれている場合、変数に入れられている数値を使って比較を行う.
    //
    // if(いふ)は、式の内容によって実行するプログラムを切り替える制御文.
    // if文は「if (式) { 条件式が真ときだけ実行されるプログラム }」の形を取る.
    //
    // 数値の大小を比較するには数学と同じ「>(だいなり)」、「<(しょうなり)」記号を使う.
    if (player_hand == 0) {
      set_text(0, 160, "あなた: グー");
    }
    if (player_hand == 1) {
      set_text(0, 160, "あなた: チョキ");
    }
    if (player_hand == 2) {
      set_text(0, 160, "あなた: パー");
    }

    // [CPUの手を表示]
    if (cpu_hand == 0) {
      set_text(0, 200, "あいて: グー");
    }
    if (cpu_hand == 1) {
      set_text(0, 200, "あいて: チョキ");
    }
    if (cpu_hand == 2) {
      set_text(0, 200, "あいて: パー");
    }

    // [一定時間待つ]
    // wait(うぇいと)は、指定された秒数だけプログラムの実行を停止する関数.
    wait(1);

    // [勝敗を判定する]
    // 条件式は組み合わせるこができる.
    // 条件式を組み合わせるには「&&(あんど・あんど)」を使う. 論理積(ろんりせき).
    // 例えば、プレイヤーの手が0(グー)かつCPUの手が1(チョキ)なら、プレイヤーの勝ち、というようにしたい.
    // これは「player_hand == 0 && cpu_hand == 1」という条件式で表すことができる.
    // つまり、&&は「且つ(かつ)」という意味だといえる.
    // 同じ様に、プレイヤーの手が2(パー)でCPUの手が1(チョキ)なら、CPUの勝ちとなる.
    // これは「player_hand == 2 && cpu_hand == 1」という条件式で表すことができる.
    // どちらも同じ手を出した場合は「あいこ」になるが、
    // これは「player_hand == cpu_hand」という条件式で表すことができる.
    if (player_hand == 0 && cpu_hand == 1) {
      set_text(0, 280, "あなたの勝ちです！");
    }
    if (player_hand == 1 && cpu_hand == 2) {
      set_text(0, 280, "あなたの勝ちです！");
    }
    if (player_hand == 2 && cpu_hand == 0) {
      set_text(0, 280, "あなたの勝ちです！");
    }

    if (player_hand == 0 && cpu_hand == 2) {
      set_text(0, 280, "あなたの負けです");
    }
    if (player_hand == 1 && cpu_hand == 0) {
      set_text(0, 280, "あなたの負けです");
    }
    if (player_hand == 2 && cpu_hand == 1) {
      set_text(0, 280, "あなたの負けです");
    }

    if (player_hand == cpu_hand) {
      set_text(0, 280, "あいこです");
    }

    wait(2);
  }

  set_text(0, 320, "何かキーを押すと終了します");

  // [何かキーが押されるまで待つ]
  // wait_any_key(うぇいと・えにー・きー)は、なにかキーが押されるまでプログラムの実行を停止する関数.
  wait_any_key();

  // [プログラムの終了処理]
  finalize();
}
